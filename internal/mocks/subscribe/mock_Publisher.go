// Code generated by mockery v2.44.1. DO NOT EDIT.

package subscribe

import (
	context "context"

	subscribe "github.com/smousa/kafka-grpc-stream/internal/subscribe"
	mock "github.com/stretchr/testify/mock"
)

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

type MockPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisher) EXPECT() *MockPublisher_Expecter {
	return &MockPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, message
func (_m *MockPublisher) Publish(ctx context.Context, message *subscribe.Message) {
	_m.Called(ctx, message)
}

// MockPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - message *subscribe.Message
func (_e *MockPublisher_Expecter) Publish(ctx interface{}, message interface{}) *MockPublisher_Publish_Call {
	return &MockPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, message)}
}

func (_c *MockPublisher_Publish_Call) Run(run func(ctx context.Context, message *subscribe.Message)) *MockPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*subscribe.Message))
	})
	return _c
}

func (_c *MockPublisher_Publish_Call) Return() *MockPublisher_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_Publish_Call) RunAndReturn(run func(context.Context, *subscribe.Message)) *MockPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
