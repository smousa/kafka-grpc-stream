// Code generated by mockery v2.44.1. DO NOT EDIT.

package subscribe

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kgo "github.com/twmb/franz-go/pkg/kgo"
)

// MockKafkaClient is an autogenerated mock type for the KafkaClient type
type MockKafkaClient struct {
	mock.Mock
}

type MockKafkaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKafkaClient) EXPECT() *MockKafkaClient_Expecter {
	return &MockKafkaClient_Expecter{mock: &_m.Mock}
}

// PollFetches provides a mock function with given fields: _a0
func (_m *MockKafkaClient) PollFetches(_a0 context.Context) kgo.Fetches {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PollFetches")
	}

	var r0 kgo.Fetches
	if rf, ok := ret.Get(0).(func(context.Context) kgo.Fetches); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kgo.Fetches)
		}
	}

	return r0
}

// MockKafkaClient_PollFetches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollFetches'
type MockKafkaClient_PollFetches_Call struct {
	*mock.Call
}

// PollFetches is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockKafkaClient_Expecter) PollFetches(_a0 interface{}) *MockKafkaClient_PollFetches_Call {
	return &MockKafkaClient_PollFetches_Call{Call: _e.mock.On("PollFetches", _a0)}
}

func (_c *MockKafkaClient_PollFetches_Call) Run(run func(_a0 context.Context)) *MockKafkaClient_PollFetches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockKafkaClient_PollFetches_Call) Return(_a0 kgo.Fetches) *MockKafkaClient_PollFetches_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKafkaClient_PollFetches_Call) RunAndReturn(run func(context.Context) kgo.Fetches) *MockKafkaClient_PollFetches_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKafkaClient creates a new instance of MockKafkaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKafkaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKafkaClient {
	mock := &MockKafkaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
